Map
====
It is a not a child interface of Collection interface.

If we want to represent group of individual objects in key,value pair then we need to use Map interface.

Key and value both must be objects.

Key can't duplicate but value can be duplicate.

Each key and value pair is called one entry.

Diagram: java36.1


HashMap
--------
The underlying data structure is Hashtable.

Key can't be duplicated but value can be duplicated.

Insertion is not preserved because it will take hashcode of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is possible for both key and value.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap hm=new HashMap();
		hm.put("one","raja");
		hm.put("five","alan");
		hm.put("nine","jose");
		hm.put("six","nelson");
		System.out.println(hm);//{nine=jose, six=nelson, one=raja, five=alan}
		hm.put("one","rani");
		System.out.println(hm);//{nine=jose, six=nelson, one=rani, five=alan}
		hm.put(1,10);
		System.out.println(hm);//{nine=jose, 1=10, six=nelson, one=rani, five=alan}
		hm.put(null,null);
		System.out.println(hm);//{null=null, nine=jose, 1=10, six=nelson, one=rani, five=alan}
	}
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		HashMap<String,String> hm=new HashMap<String,String>();
		hm.put("one","raja");
		hm.put("five","alan");
		hm.put("nine","jose");
		hm.put("six","nelson");

		Set s=hm.keySet();
		System.out.println(s);//[nine, six, one, five]

		Collection c=hm.values();
		System.out.println(c);//[jose, nelson, raja, alan]

		Set s1=hm.entrySet();
		System.out.println(s1);//[nine=jose, six=nelson, one=raja, five=alan]
	}
}


LinkedHashMap
=============
It is a child class of HashMap class.

LinkedHashMap is exactly as HashMap class with following differences.

HashMap					LinkedHashMap
------------				--------------
The underlying datastructure is 	The underlying datastructure is Hashtable
Hashtable.				and LinkedList.

Insertion order is not preserved.	Insertion order is preserved.

Introduced in 1.2v.			Introduced in 1.4v.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedHashMap<String,String> lhm=new LinkedHashMap<String,String>();
		lhm.put("one","raja");
		lhm.put("five","alan");
		lhm.put("nine","jose");
		lhm.put("six","nelson");
		System.out.println(lhm);//{one=raja, five=alan, nine=jose, six=nelson}
		lhm.put("one","rani");
		System.out.println(lhm);//{one=rani, five=alan, nine=jose, six=nelson}
		lhm.put(null,null);
		System.out.println(lhm);//{one=rani, five=alan, nine=jose, six=nelson, null=null}
	}
}

TreeMap
--------
The underlying data structure is RED BLACK TREE.

Key can't be duplicate but value can be duplicated.

Insertion order is not preserved because it will take sorting order of the key.

If we depend upon default natural sorting order then key must be homogeneous and Comparable.

If we depend upon customized sorting order then key must be hetrogeneous and Non-Comparable.

Key can't be null but value can be null.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		TreeMap<Integer,String> tm=new TreeMap<Integer,String>();
		tm.put(10,"ten");
		tm.put(1,"one");
		tm.put(5,"five");
		tm.put(3,"three");
		System.out.println(tm);//{1=one, 3=three, 5=five, 10=ten}
		tm.put(1,"hundred");
		System.out.println(tm);//{1=hundred, 3=three, 5=five, 10=ten}
		tm.put(4,null);
		System.out.println(tm);//{1=hundred, 3=three, 4=null, 5=five, 10=ten}
		tm.put(null,"six");
		System.out.println(tm);//R.E NullPointerException
	}
}

Hashtable
----------
The underlying data structure is Hashtable.

Key can't be duplicate but value can be duplicated.

Insertion order is not preserved because it will take descending order of the key.

Hetrogeneous objects are allowed for both key and value.

Null insertion is not possible for both key and value.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Hashtable<Integer,String> ht=new Hashtable<Integer,String>();
		ht.put(10,"ten");
		ht.put(1,"one");
		ht.put(5,"five");
		ht.put(3,"three");
		System.out.println(ht);//{10=ten, 5=five, 3=three, 1=one}

		ht.put(1,"hundred");
		System.out.println(ht);//{10=ten, 5=five, 3=three, 1=hundred}

		//ht.put(4,null);
		//System.out.println(ht);//NullPointerException
		
		//ht.put(null,"four");
		//System.out.println(ht);//NullPointerException
	}
}

Types of Cursors 
================
Cursor is used to read objects one by one from Collections.

We have three types of cursors.

1) Enumeration 

2) Iterator 

3) ListIterator 

1) Enumeration 
---------------
Enumeration is used to read objects one by one from legacy Collection objects.

We can create Enumeration object as follow.
ex:
	Enumeration e=v.elements();


Enumeration interface contains following methods.
ex:
	public boolean hasMoreElements()
	public Object nextElement()

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		Vector v=new Vector();
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]

		Enumeration e=v.elements();

		while(e.hasMoreElements())
		{
			Integer i=(Integer)e.nextElement();
			System.out.println(i);
		}


	}
}
Limitations with Enumeration
---------------------------
Using Enumeration interface we can read objects only from Legacy Collection objects.Hence it is not a universal cursor.

Using Enumeration , we can perform only read operation but not remove operation.

To overcome these limitations , Sun Micro System introduced Iterator interface.

2)Iterator
-----------
It is used to read the objects one by one from any Collection object.Hence it is a universal cursor.

Iterator interface can perform read and remove operations.

Iterator object can be created as follow.
ex:
	Iterator itr=al.iterator();

Iterator interface contains following methods.
ex:
	public boolean hasNext()
	public Object next()
	public void remove()	

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		for(int i=1;i<=10;i++)
		{
			al.add(i);
		}
		System.out.println(al);//[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

		Iterator itr=al.iterator();
		while(itr.hasNext())
		{
			Integer i=(Integer)itr.next();
			if(i%2==0)
			{
				itr.remove();
			}
		}
		System.out.println(al);//[1,3,5,7,9]
	}
}

Limitations with Iterator 
-----------------------
Using Enumeration and Iterator we can read objects only in forward direction but not in backward direction.Hence they are not bi-directional cursors.

Using Iterator interface we can perform read and remove operation but not adding and replacement of new objects.

To overcome these limitations Sun Micro System introduced ListIterator.


3)ListIterator
--------------
IT is used to read objects one by one from List Collection objects.

ListIterator interface can perform read, remove , adding and replacement of new objects.

We can create ListIterator interface object as follow.

ex:
	ListIterator litr=al.listIterator();

ListIterator contains following methods.
ex:
	public boolean hasNext()
	public Object next()
	public boolean hasPrevious()
	public Object previous()
	public void remove();
	public void nextIndex();
	public void previousIndex();
	public void set(Object o);
	public void add(Object o);

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("venki");
		al.add("chiru");
		System.out.println(al);//[bala,nag,venki,chiru]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s=(String)litr.next();
			System.out.println(s);
		}

	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("venki");
		al.add("chiru");
		System.out.println(al);//[bala,nag,venki,chiru]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.remove();
			}
		}
		System.out.println(al);//[bala,venki,chiru]

	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("venki");
		al.add("chiru");
		System.out.println(al);//[bala,nag,venki,chiru]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.add("chaitanya");
			}
		}
		System.out.println(al);//[bala,nag,chaitanya,venki,chiru]

	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("bala");
		al.add("nag");
		al.add("venki");
		al.add("chiru");
		System.out.println(al);//[bala,nag,venki,chiru]

		ListIterator litr=al.listIterator();

		while(litr.hasNext())
		{
			String s=(String)litr.next();
			if(s.equals("nag"))
			{
				litr.set("chaitanya");
			}
		}
		System.out.println(al);//[bala, chaitanya, venki, chiru]

	}
}

Interview Questions
==================
Q)Write a java program to display number of words present in a given String?

input:
	This is is java java class 

output:
	This=1, is=2, java=2, class=1


import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="This is is java java class";

		Map<String,Integer> map=new LinkedHashMap<String,Integer>();

		String[] sarr=str.split(" ");

		//for each loop
		for(String s:sarr)
		{
			if(map.get(s)!=null)
			{
				map.put(s,map.get(s)+1);
			}
			else
			{
				map.put(s,1);
			}
		}
		System.out.println(map);
	}	
}


Q)Write a java program to display number of characters present in a given String?

input:
	java

output:
	j=1,a=2,v=1

ex:
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="java";

		Map<Character,Integer> map=new LinkedHashMap<Character,Integer>();

		char[] carr=str.toCharArray();

		//for each loop
		for(char ch:carr)
		{
			if(map.get(ch)!=null)
			{
				map.put(ch,map.get(ch)+1);
			}
			else
			{
				map.put(ch,1);
			}
		}
		System.out.println(map);
	}	
}


















































































































































































		













































