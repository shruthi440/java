Generics
=========
Arrays are typesafe.It means we can provide guarantee that what type of elements are present in arrays.

If requirement is there to store String values then it is recommanded to use 
String[]  array.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]="bye";
	sarr[3]=10; // invalid 

At the time retrieving the data we don't need to perform any typecasting.
ex:
	String[] sarr=new String[10];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]="bye";
	-
	-
	String val1=sarr[0];
	
Collections are not typesafe.It means we can't provide guaranatee that what type of elements are present in Collections.

If requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but sometimes our program get failure.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add("bye");
	al.add(10);

At the time of retrieving the data compulsary we need to perform typecasting.
ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add("bye");
	al.add(10);
	-
	-
	String str=(String)al.get(0);

To overcome this limitation Sun Micro System introduced Generics concept in 1.5v.

The main objective of generics are 

1) To make Collections as typesafe.

2) To avoid typecasting problem.
	
java.util package
=================

Q)What is the difference between Arrays and Collections?

Arrays					Collections
-------					------------
It is a collection of homogeneous 	It is a collection of homogeneous and 
data elements.				hetrogeneous data elements.

It is fixed in size.			It is growable in nature.

Performance point of view arrays 	Memory point of view Collections are 
are recommanded to use.			recommanded to use.

It holds primitive types and object	It holds only object types.
types.

Arrays are not implemented based on 	Collections are implemented based on 
data structure concept.So we can't 	data structure concept.So we can expect
expect ready made methods.For every 	ready made methods.
logic we need to write the code 
explicitly.


Collection
===========
It is an interface which is present in java.util package.

It is a root interface for entire Collection framework.
	
If we want to represent group of individual objects in a single entity then we need to use Colection interface.

Collection interface contains following methods.

ex:
	cmd> javap  java.util.Collection 

ex:
  public abstract int size();
  public abstract boolean isEmpty();
  public abstract boolean contains(java.lang.Object);
  public abstract java.util.Iterator<E> iterator();
  public abstract java.lang.Object[] toArray();
  public abstract <T> T[] toArray(T[]);
  public abstract boolean add(E);
  public abstract boolean remove(java.lang.Object);
  public abstract boolean containsAll(java.util.Collection<?>);
  public abstract boolean addAll(java.util.Collection<? extends E>);
  public abstract boolean removeAll(java.util.Collection<?>);
  public boolean removeIf(java.util.function.Predicate<? super E>);
  public abstract boolean retainAll(java.util.Collection<?>);
  public abstract void clear();
  public abstract boolean equals(java.lang.Object);
  public abstract int hashCode();
  and etc.



List
======
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are allowed and order is preserved then we need to use List interface.

Diagram: java34.1


ArrayList
=========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable,Cloneable and RandomAccess interface.

If our frequent operation is a retrieval operation then ArrayList is a best choice.

ex:1
-----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		al.add(10);
		System.out.println(al);//[one,two,three,one,10]
		al.add(null);
		System.out.println(al);//[one,two,three,one,10,null]
	}
}

ex:2
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		al.add(null);
		System.out.println(al);//[one,two,three,one,null]
	}
}

ex:3
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();

		System.out.println(al.isEmpty()); //true 
		al.add("one");
		al.add("two");
		al.add("three");

		for(int i=0;i<al.size();i++)
		{
			String s=al.get(i);
			System.out.println(s);
		}
		
	}
}

ex:4
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");

		System.out.println(al.contains("one")); //true 

		al.remove("three");

		System.out.println(al);//[one,two]

		al.clear();
		System.out.println(al);//[]
		
	}
}

ex:5
-----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=new ArrayList<String>();
		list.add("one");
		list.add("two");
		list.add("three");

		System.out.println(list); //[one,two,three]
	}
}

ex:6
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=new ArrayList<String>();
		list.add(new String("one"));
		list.add(new String("two"));
		list.add(new String("three"));
		System.out.println(list); //[one,two,three]
	}
}

ex:7
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al1=new ArrayList<String>();
		al1.add("one");
		al1.add("two");
		al1.add("three");
		System.out.println(al1);//[one,two,three]
		
		ArrayList<String> al2=new ArrayList<String>();
		al2.add("raja");
		System.out.println(al2); //[raja]

		al2.addAll(al1);
		System.out.println(al2);//[raja,one,two,three]

		System.out.println(al2.containsAll(al1)); // true 

		al2.removeAll(al1);
		System.out.println(al2);//[raja]
		
	}	
}

ex:8
-----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=Arrays.asList("one","two","three");

		System.out.println(list);//[one,two,three]
		
	}	
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(10,20,30,40);

		System.out.println(list);//[10,20,30,40]
		
	}	
}


LinkedList
==========
The underlying data structure is doubly LinkedList.

Duplicate objects are allowed.

Order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible. 

It implements Serializable, Cloneable and Deque interface.

LinkedList contains following methods.
ex:
	public E getFirst();
 	public E getLast();
  	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);

If our frequent operation is a insertion and deletion in the middle then LinkedList is a best choice.

ex:1
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		ll.add(10);
		System.out.println(ll);//[one,two,three,one,10]
		ll.add(null);
		System.out.println(ll);//[one,two,three,one,10,null]
		
	}	
}

ex:2
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		ll.add(null);
		System.out.println(ll);//[one,two,three,one,null]
		
	}	
}

ex:3
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]

		ll.addFirst("gogo");
		ll.addLast("jojo");
		System.out.println(ll);//[gogo,one,two,three,jojo]

		System.out.println(ll.getFirst());//gogo
		System.out.println(ll.getLast());//jojo

		ll.removeFirst();
		ll.removeLast();
		System.out.println(ll);//[one,two,three]
		
	}	
}

ex:
----
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]

		ll.add(1,"raja");
		System.out.println(ll);//[one,raja,two,three]		
		
	}	
}

Assignment
==========
Method overloading vs Method overriding 

interface vs Abstract class 

StringBuffer vs StringBuilder 

Arrays vs Collections 

JDK vs JRE vs JVM

final vs finally vs finalized method 

length vs length() 

== vs .equals() 













































































































































































