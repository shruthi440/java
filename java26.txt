ex:
---
class A
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B 
{
	A a;

	B(A a)
	{
		a.m1();
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A obj=new A();
		B b=new B(obj);
	}	
}




2)Default constructor
=====================
It is a compiler generated constructor for every java program where we are not defining 
atleast zero argument constructor.

To see the default constructor we need to use below command.
ex:
	cmd> javap -c  Test 

Diagram: java26.1

Constructor overloading
======================
Having same constructor name with different parameters in a single class is called 
constructor overloading.

ex:

class A
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a1=new A();
		A a2=new A(10);	
		A a3=new A(10.5d);
	}
}

this keyword
=============
A "this" keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables 

2) To refer current class methods 

3) To refer current class constructors 

1) To refer current class variables 
------------------------------------
class A 
{
	//current class variables 
	int i=10;
	int j=20;
	
	A(int i,int j)
	{
		System.out.println(i+" "+j); //100 200
		System.out.println(this.i+" "+this.j);//10 20
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A(100,200);
	}	
}

2) To refer current class methods 
--------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}

}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A();
		a.m1();
	}	
}

3)To refer current class constructor
-------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}

}
class Test  
{
	public static void main(String[] args) 
	{
		A a=new A(10.5d);
	}	
}


super keyword
=============
A "super" keyword is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables 

2) To refer super class methods 

3) To refer super class constructors

1) To refer super class variables 
----------------------------------
class A 
{
	int i=1;
	int j=2;
}
class B extends A 
{
	int i=10;
	int j=20;
	B(int i,int j)
	{
		System.out.println(this.i+" "+this.j); // 10 20 
		System.out.println(super.i+" "+super.j);// 1 2 
		System.out.println(i+" "+j); // 100 200 
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		B b=new B(100,200);
	}	
}

2) To refer super class methods 
--------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A 
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		B b=new B();
		b.m2();
	}	
}

3)To refer super class constructors
--------------------------------------
class A 
{
	A()
	{
		System.out.println("A-const ");
	}
}
class B extends A 
{
	B()
	{
		super();
		System.out.println("B-const");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		B b=new B();
	}	
}

ex:
---
class A 
{
	A(int i)
	{
		System.out.println("A-const ");
	}
}
class B extends A 
{
	B()
	{
		super(10);
		System.out.println("B-const");
	}
}
class Test  
{
	public static void main(String[] args) 
	{
		B b=new B();
	}	
}

Interfaces
==========
Interface is a collection of zero or more abstract methods.

Abstract methods are incomplete methods because they ends with semicolon and does not 
have any body.

It is not possible to create object for interfaces.

To write the implementation of abstract methods of an interface we will use implementation
class.

It is possible to create object for implementation class because it contains method with body.

By default every abstract method is a public and abstract.

Interface contains only constants i.e public static final.

syntax:
		interface  interface_name
		{
			//constants
			//abstract methods
		}

If we know Service Requirement specification then we need to use interface.

Diagram: java26.2


ex:1
-----
interface A 
{
	//abstract method
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1 Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}

ex:2
------
interface A 
{
	//abstract method
	public abstract void m1();
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we need to override all methods otherwise we will
get compile time error.

ex:3
----
interface A 
{
	//abstract methods
	public abstract void show();
	public void display();
	abstract void view();
	void see();
}
class B implements A 
{
	public void show()
	{
		System.out.println("show method");
	}
	public void display()
	{
		System.out.println("display method");
	}
	public void view()
	{
		System.out.println("view method");
	}
	public void see()
	{
		System.out.println("see method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.show();
		a.display();
		a.view();
		a.see();
	}
}

A class can't extends more then one class simultenously.
But interface can extends more then one interface simultenously.

ex:

interface A
{
	void m1();
}
interface B
{
	void m2();
}
interface C extends A,B 
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1 method");
	}
	public void m2()
	{
		System.out.println("M2 method");
	}
	public void m3()
	{
		System.out.println("M3 method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		C c=new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more then one interface.

ex:
---

interface Father
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother
{
	public void height()
	{
		float height=(Father.HT+Mother.HT)/2;
		System.out.println("Child height is ="+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}

Note:
-----
In general, interface is a blue print of a class.

According java 8 version, interface is a collection of abstract methods, default methods 
and static methods.

According java 9 version, interface is a collection of abstract methods, default methods 
static methods and private methods.


Q)What is marker interface?

Interface which does not any methods or constants is called marker interface.

Empty interface is called marker interface.

Using marker interface we will get some ability to do.

We have following list of marker interfaces in java.

ex:

	Serializable
	Remote 
	Cloneable 
	and etc.







































































































































































































